// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// model Post {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String

//     @@index([name])
// }

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String?
    username          String
    password          String
    provider          String?
    providerAccountId String?
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Client {
    id        String    @id @default(cuid())
    firstName String?
    lastName  String?
    phone     String?
    address   String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    vehicles  Vehicle[]
    jobs      Jobs[]
}

model Vehicle {
    id                 String   @id @default(cuid())
    registrationNumber String?
    yearOfManufacture  Int?
    model              String?
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    client             Client?  @relation(fields: [clientId], references: [id])
    clientId           String?
    jobs               Jobs[]
}

model Jobs {
    id        String   @id @default(cuid())
    worker    String?
    task      String?
    price     String?
    status    String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    items     Items[]
    client    Client?  @relation(fields: [clientId], references: [id])
    clientId  String?
    vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
    vehicleId String?
}

model Items {
    id        String   @id @default(cuid())
    name      String?
    broughtBy String?
    price     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    job       Jobs?    @relation(fields: [jobId], references: [id])
    jobId     String?
}
