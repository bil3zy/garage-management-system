// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider = "zod-prisma"
    output   = "./zod" // (default) the directory where generated zod schemas will be saved

    relationModel = true // (default) Create and export both plain and related models.
    // relationModel         = "default" // Do not export model without relations.
    // relationModel         = false // Do not generate related model

    modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
    // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

    modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

    // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
    useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

    // imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

    // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
    prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
    // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// model Post {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String

//     @@index([name])
// }

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String?
    username          String
    password          String
    provider          String?
    providerAccountId String?
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    garage            Garage? @relation(fields: [garageId], references: [id])
    garageId          String?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Garage {
    id        String     @id @default(cuid())
    name      String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    Jobs      Jobs[]
    Mechanic  Mechanic[]
    Account   Account[]
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Client {
    id        String    @id @default(cuid())
    firstName String?
    lastName  String?
    phone     String?
    address   String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    vehicles  Vehicle[]
    jobs      Jobs[]
}

model Vehicle {
    id                 String   @id @default(cuid())
    registrationNumber String?
    yearOfManufacture  Int?
    model              String?
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    client             Client?  @relation(fields: [clientId], references: [id])
    clientId           String?
    jobs               Jobs[]
}

model Jobs {
    id         String    @id @default(cuid())
    task       String?
    costOfWork Int?
    status     String?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    items      Items[]
    client     Client?   @relation(fields: [clientId], references: [id])
    clientId   String?
    vehicle    Vehicle?  @relation(fields: [vehicleId], references: [id])
    vehicleId  String?
    mechanic   Mechanic? @relation(fields: [mechanicId], references: [id])
    mechanicId String?
    garage     Garage?   @relation(fields: [garageId], references: [id])
    garageId   String
}

model Items {
    id        String   @id @default(cuid())
    name      String?
    broughtBy String?
    price     Int?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    job       Jobs?    @relation(fields: [jobId], references: [id])
    jobId     String?
}

model Mechanic {
    id         String   @id @default(cuid())
    name       String?
    percentage Int?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    jobs       Jobs[]
    garage     Garage?  @relation(fields: [garageId], references: [id])
    garageId   String?
}
